#!/bin/zsh
emulate -RL zsh
setopt extendedglob

local exename=$0
local verbose=0
local cores=1
local pattern repl_name repl_args repl_output files
typeset -A f_args flags

function usage {
	print "Usage: $exename file_glob command_name [command_arg_pattern1] [...]" >&2
	print ""
	exit 1
}

while getopts ":vc:" opt; do
	case $opt in
		v)
			verbose=1
			;;
		c)
			cores=$OPTARG
			;;
		\?)
			print "Unknown argument: -$OPTARG"
			print ""
			usage
			;;
	esac
done

if [[ $(($# - $OPTIND)) -lt 1 ]]; then
	usage
fi

if [[ $cores -gt 1 ]]; then

	# check if parallel is available
	if [[ ! ( -x $( which parallel ) ) ]]; then 
		echo "Parallel execution requires GNU parallel to be installed and available as 'parallel'!"
		exit 1
	fi
fi

shift $((OPTIND-1))

pattern=$1
shift 1

# command and remaining args to be passed on to command
repl_args=($@)

files=(${~pattern})
for f in $files; do
	[[ -e $f && $f = (#b)${~pattern} ]] || continue
	set -- "$match[@]"

	arg=()
	for ((i = 1; i <= $#repl_args; i++ )) do
		repl=${(Xe)repl_args[i]}
		arg+=("${(q)repl}")
	done

	#arg=${(Xe)repl_args}
	f_args[$f]=${(j: :)arg[*]}
done

if [[ $cores -gt 1 ]]; then

	flags=()
	if [[ "$verbose" -gt 0 ]]; then
		flags+='-v'
	fi

	for f in $files; do
		exec=$f_args[$f];
		echo $exec
	done | parallel $flags -j $cores 

	stat=$?

else

	for f in $files; do
		exec=$f_args[$f]

		if [[ "$verbose" -gt 0 ]]; then
			echo $exec
		fi

		zsh -c ${exec} || stat=$?
	done

fi


exit $stat
